---
import "../styles/main.css";
import "../styles/focus-styles.css";
import MenuComponent from "@components/Menu/Menu";
import Footer from "@components/Footer.astro";
import CookieBanner from "@components/CookieBanner/index.tsx";

import { existsSync } from "fs";
import path from "path";

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description, image } = Astro.props;

const page_title = title + " | Nextflow";

const netlifyPrimeURL = import.meta.env.DEPLOY_PRIME_URL;
const image_path = image || "/img/share.png";
const share_image = (netlifyPrimeURL || Astro.url.origin) + image_path;

// Check that the share card image exists
if (!existsSync(path.join(path.resolve("./public"), image_path))) {
  throw new Error(`The file at public${image_path} does not exist.`);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{page_title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={page_title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={share_image} />
    <meta property="og:type" content="website" />
    <meta data-react-helmet="true" name="twitter:card" content="summary_large_image" />
    <meta data-react-helmet="true" name="twitter:creator" content="@nextflowio" />
    <meta property="twitter:title" content={page_title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={share_image} />

    <!-- Bootstrap core CSS -->
    <link href="/css/bootstrap.css" rel="stylesheet" />

    <!-- Custom styles for this template -->
    <link href="/css/color-styles.css" rel="stylesheet" />
    <link href="/css/ui-elements.css" rel="stylesheet" />
    <link href="/css/custom.css" rel="stylesheet" />

    <!-- Resources -->
    <link href="/css/animate.css" rel="stylesheet" />
    <link href="/css/summit.css" rel="stylesheet" />
    <link href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet" />
    <link href="/fonts/degular/degular.css" rel="stylesheet" />
    <link href="/fonts/inter/inter.css" rel="stylesheet" />

    <!-- Google Tag Manager -->
    <script is:inline>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-TNCXSWG");

      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      window.gtag = gtag;
      gtag("consent", "default", {
        ad_storage: "denied",
        analytics_storage: "denied",
        ad_user_data: "denied",
        ad_personalization: "denied",
      });
    </script>
    <!-- End Google Tag Manager -->

    <style is:global>
      html,
      body {
        width: 100%;
        height: auto;
        min-height: 100%;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
        overflow-y: auto;
      }

      body {
        position: relative;
        overflow-y: auto !important;
      }
    </style>
  </head>
  <body class="">
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-TNCXSWG"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->

    <MenuComponent client:load />

    <slot />
    <CookieBanner client:only="react" />
    <Footer />

    <script is:inline>
      const dropdowns = document.querySelectorAll(".navbar-nav .dropdown");
      const isMobile = window.innerWidth <= 767;

      if (!isMobile) {
        let clickedDropdown = null;
        dropdowns.forEach(function (dropdown) {
          dropdown.addEventListener("mouseenter", function () {
            if (!clickedDropdown) {
              this.classList.add("open");
              const toggle = this.querySelector(".dropdown-toggle");
              if (toggle) toggle.setAttribute("aria-expanded", "true");
            }
          });

          dropdown.addEventListener("mouseleave", function () {
            if (!clickedDropdown || clickedDropdown !== this) {
              if (!this.contains(document.activeElement)) {
                this.classList.remove("open");
                const toggle = this.querySelector(".dropdown-toggle");
                if (toggle) toggle.setAttribute("aria-expanded", "false");
              }
            }
          });

          const toggle = dropdown.querySelector(".dropdown-toggle");
          if (toggle) {
            toggle.addEventListener("click", function (e) {
              e.preventDefault();

              if (clickedDropdown === dropdown) {
                dropdown.classList.remove("open");
                toggle.setAttribute("aria-expanded", "false");
                clickedDropdown = null;
              } else {
                if (clickedDropdown) {
                  clickedDropdown.classList.remove("open");
                  const prevToggle = clickedDropdown.querySelector(".dropdown-toggle");
                  if (prevToggle) prevToggle.setAttribute("aria-expanded", "false");
                }

                dropdown.classList.add("open");
                toggle.setAttribute("aria-expanded", "true");
                clickedDropdown = dropdown;
              }
            });
          }
        });

        document.addEventListener("click", function (e) {
          if (clickedDropdown && !clickedDropdown.contains(e.target)) {
            clickedDropdown.classList.remove("open");
            const toggle = clickedDropdown.querySelector(".dropdown-toggle");
            if (toggle) toggle.setAttribute("aria-expanded", "false");
            clickedDropdown = null;
          }
        });
      }

      function isTouchDevice() {
        return "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
      }

      if (isMobile && isTouchDevice()) {
        document.addEventListener("DOMContentLoaded", function () {
          const dropdownToggles = document.querySelectorAll(".dropdown-toggle");

          dropdownToggles.forEach(function (toggle) {
            toggle.addEventListener(
              "click",
              function (e) {
                if (isMobile) {
                  e.preventDefault();
                  e.stopPropagation();

                  const parentLi = toggle.closest(".dropdown");
                  if (parentLi) {
                    const isOpen = parentLi.classList.contains("open");
                    if (isOpen) {
                      parentLi.classList.remove("open");
                      toggle.setAttribute("aria-expanded", "false");
                    } else {
                      parentLi.classList.add("open");
                      toggle.setAttribute("aria-expanded", "true");
                    }
                  }
                }
              },
              false,
            );

            toggle.addEventListener("touchstart", function (e) {}, { passive: true });

            toggle.addEventListener(
              "touchend",
              function (e) {
                if (isMobile) {
                  e.preventDefault();
                }
              },
              false,
            );
          });

          document.removeEventListener("click", clearMenus);

          // Función auxiliar para cerrar todos los menús
          function clearMenus() {
            dropdownToggles.forEach(function (toggle) {
              const parentLi = toggle.closest(".dropdown");
              if (parentLi && parentLi.classList.contains("open")) {
                parentLi.classList.remove("open");
                toggle.setAttribute("aria-expanded", "false");
              }
            });
          }

          // Solo cerrar los menús cuando se toca fuera de ellos
          document.addEventListener(
            "touchstart",
            function (e) {
              if (!e.target.closest(".dropdown")) {
                clearMenus();
              }
            },
            false,
          );

          // Función de depuración para verificar eventos táctiles
          // Comentar o eliminar en producción
          function debugMobileEvents() {
            const debugStyle =
              "position: fixed; bottom: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white; padding: 10px; z-index: 9999; font-size: 12px; max-width: 80%; border-radius: 4px; display: none;";
            const debugElement = document.createElement("div");
            debugElement.setAttribute("style", debugStyle);
            document.body.appendChild(debugElement);

            // Mostrar mensajes de depuración para eventos táctiles
            document.addEventListener("touchstart", function (e) {
              const target = e.target;
              const isDropdown = target && target.closest && !!target.closest(".dropdown-toggle");
              debugElement.style.display = "block";
              debugElement.textContent = `Touchstart en: ${target.tagName} ${target.className}. Es dropdown: ${isDropdown}`;
              setTimeout(() => {
                debugElement.style.display = "none";
              }, 3000);
            });

            // Verificar eventos en los elementos dropdown
            dropdownToggles.forEach((toggle, index) => {
              toggle.addEventListener("touchstart", function () {
                debugElement.style.display = "block";
                debugElement.textContent = `Dropdown ${index} tocado`;
                setTimeout(() => {
                  debugElement.style.display = "none";
                }, 3000);
              });
            });
          }

          // Descomentar para activar depuración
          // debugMobileEvents();
        });
      }

      document.addEventListener("DOMContentLoaded", function () {
        const scrollingElement = document.scrollingElement || document.documentElement;
        const fixedElements = document.querySelectorAll(
          '*[style*="position: fixed"], *[style*="position:fixed"], *[style*="position: absolute"], *[style*="position:absolute"]',
        );

        setTimeout(() => {
          window.scrollTo(0, 10);
        }, 1000);

        const scrollableElements = Array.from(document.querySelectorAll("*")).filter((el) => {
          const style = window.getComputedStyle(el);
          return (style.overflowY === "auto" || style.overflowY === "scroll") && el.scrollHeight > el.clientHeight;
        });

        let scrollMonitor = setInterval(() => {
          if (window.scrollY > 0) {
            clearInterval(scrollMonitor);
          }
        }, 2000);

        setTimeout(() => {
          clearInterval(scrollMonitor);
        }, 30000);
      });

      window.addEventListener("scroll", function () {}, { passive: true });
    </script>
  </body>
</html>
