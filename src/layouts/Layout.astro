---
import "../styles/main.css";
import "../styles/dropdown-hover.css";
import "../styles/focus-styles.css";
import MenuComponent from "@components/Menu.tsx";
import Footer from "@components/Footer.astro";
import CookieBanner from "@components/CookieBanner/index.tsx";

import { existsSync } from "fs";
import path from "path";

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description, image } = Astro.props;

const page_title = title + " | Nextflow";

const netlifyPrimeURL = import.meta.env.DEPLOY_PRIME_URL;
const image_path = image || "/img/share.png";
const share_image = (netlifyPrimeURL || Astro.url.origin) + image_path;

// Check that the share card image exists
if (!existsSync(path.join(path.resolve("./public"), image_path))) {
  throw new Error(`The file at public${image_path} does not exist.`);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{page_title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={page_title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={share_image} />
    <meta property="og:type" content="website" />
    <meta data-react-helmet="true" name="twitter:card" content="summary_large_image" />
    <meta data-react-helmet="true" name="twitter:creator" content="@nextflowio" />
    <meta property="twitter:title" content={page_title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={share_image} />

    <!-- Bootstrap core CSS -->
    <link href="/css/bootstrap.css" rel="stylesheet" />

    <!-- Custom styles for this template -->
    <link href="/css/color-styles.css" rel="stylesheet" />
    <link href="/css/ui-elements.css" rel="stylesheet" />
    <link href="/css/custom.css" rel="stylesheet" />

    <!-- Resources -->
    <link href="/css/animate.css" rel="stylesheet" />
    <link href="/css/summit.css" rel="stylesheet" />
    <link href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet" />
    <link href="/fonts/degular/degular.css" rel="stylesheet" />
    <link href="/fonts/inter/inter.css" rel="stylesheet" />

    <!-- Google Tag Manager -->
    <script is:inline>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-TNCXSWG");

      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      window.gtag = gtag;
      gtag("consent", "default", {
        ad_storage: "denied",
        analytics_storage: "denied",
        ad_user_data: "denied",
        ad_personalization: "denied",
      });
    </script>
    <!-- End Google Tag Manager -->

    <style is:global>
      html,
      body {
        width: 100%;
        height: auto;
        min-height: 100%;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
        overflow-y: auto;
      }

      body {
        position: relative;
        /* Asegurar que el scroll funciona correctamente */
        overflow-y: auto !important;
      }
    </style>
  </head>
  <body class="">
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-TNCXSWG"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->

    <MenuComponent client:load />

    <slot />
    <CookieBanner client:only="react" />
    <Footer />

    <script is:inline>
      const dropdowns = document.querySelectorAll(".navbar-nav .dropdown");
      dropdowns.forEach(function (dropdown) {
        dropdown.addEventListener("mouseenter", function () {
          this.classList.add("open");
          const toggle = this.querySelector(".dropdown-toggle");
          if (toggle) toggle.setAttribute("aria-expanded", "true");
        });

        dropdown.addEventListener("mouseleave", function () {
          if (!this.contains(document.activeElement)) {
            this.classList.remove("open");
            const toggle = this.querySelector(".dropdown-toggle");
            if (toggle) toggle.setAttribute("aria-expanded", "false");
          }
        });
      });

      // Diagnóstico de scroll
      document.addEventListener("DOMContentLoaded", function () {
        console.log("Altura del documento:", document.documentElement.scrollHeight);
        console.log("Altura de la ventana:", window.innerHeight);
        console.log("¿Se debe mostrar scroll?", document.documentElement.scrollHeight > window.innerHeight);

        // Verificar qué elemento se está scrolleando
        const scrollingElement = document.scrollingElement || document.documentElement;
        console.log("Elemento de scroll:", scrollingElement);

        // Verificar si hay contenedores con position: fixed o absolute que puedan estar afectando
        const fixedElements = document.querySelectorAll(
          '*[style*="position: fixed"], *[style*="position:fixed"], *[style*="position: absolute"], *[style*="position:absolute"]',
        );
        console.log("Elementos con posición fija o absoluta:", fixedElements);

        // Forzar un scrollTo para verificar si funciona
        setTimeout(() => {
          window.scrollTo(0, 10);
          console.log("scrollY después de forzar scroll:", window.scrollY);
        }, 1000);

        // Verificar otros elementos que puedan estar capturando el scroll
        const scrollableElements = Array.from(document.querySelectorAll("*")).filter((el) => {
          const style = window.getComputedStyle(el);
          return (style.overflowY === "auto" || style.overflowY === "scroll") && el.scrollHeight > el.clientHeight;
        });
        console.log("Elementos scrolleables:", scrollableElements);

        // Monitorear scrollY continuamente
        let scrollMonitor = setInterval(() => {
          console.log("Monitoreando scrollY:", window.scrollY);
          if (window.scrollY > 0) {
            console.log("¡scrollY es mayor a 0!");
            clearInterval(scrollMonitor);
          }
        }, 2000);

        // Limpiar después de 30 segundos para no seguir consumiendo recursos
        setTimeout(() => {
          clearInterval(scrollMonitor);
        }, 30000);
      });

      // Depuración de scroll
      window.addEventListener(
        "scroll",
        function () {
          console.log("scrollY:", window.scrollY);
          console.log("pageYOffset:", window.pageYOffset);
          console.log("documentElement.scrollTop:", document.documentElement.scrollTop);
          console.log("body.scrollTop:", document.body.scrollTop);
        },
        { passive: true },
      );
    </script>
  </body>
</html>
